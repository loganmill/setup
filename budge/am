#!/usr/bin/env python3
# define USERNAME, PWD
from datetime import date
import json
import os
import pdb
from re import sub
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.select import Select
import time

def wait_for(condition_function):
  start_time = time.time() 
  while time.time() < start_time + 20: 
    if condition_function(): 
      return True 
    else: 
      time.sleep(0.1) 
  raise Exception(
   'Timeout waiting for {}'.format(condition_function.__name__) 
  )

class wait_for_page_load(object):

  def __init__(self, driver):
    self.driver = driver
    

  def __enter__(self):
    self.old_page = self.driver.find_element_by_tag_name('html')
    
  def page_has_loaded(self):
    new_page = self.driver.find_element_by_tag_name('html')
    return new_page.id != self.old_page.id
    
  def __exit__(self, *_):
    wait_for(self.page_has_loaded)


CONFIG = {}
CONFIG_PATH = os.path.expanduser('~/.budge.json')

def load_config():
    global CONFIG
    if not os.path.exists(CONFIG_PATH):
       with open(CONFIG_PATH, 'w+') as f:
          f.write("""
{ "EM_URL": "https://wealth.emaplan.com/ema/SignIn",
  "EM_USERNAME": "a@b.com",
  "EM_PWD": "xxx",
  "EM_DAYS": 30,
  "AM_URL": "https://www.amazon.com",
  "AM_USERNAME": "a@b.com",
  "AM_PWD": "xxx",
  "AM_DAYS": 30

}
""")
    with open(CONFIG_PATH) as f:
        CONFIG = json.load(f)
       
def load_emoney():
    days = CONFIG['EM_DAYS']
    driver = webdriver.Chrome('/usr/bin/chromedriver')
    end_time = time.time()
    start_time = end_time - (days * 24 * 60 * 60) # 30 days
    start_date_range = date.fromtimestamp(start_time).strftime('%m/%d/%Y')
    end_date_range = date.fromtimestamp(end_time).strftime('%m/%d/%Y')
    with wait_for_page_load(driver):
        driver.get(CONFIG['EM_URL'])
        username = driver.find_element_by_id('Username')
        username.send_keys(CONFIG['EM_USERNAME'])
        pwd = driver.find_element_by_id('Password')
        pwd.send_keys(CONFIG['EM_PWD'])
        pwd.send_keys(Keys.RETURN)
    with wait_for_page_load(driver):
        spending = driver.find_element_by_partial_link_text('Spending')
        spending.click()
    time.sleep(3)
    with wait_for_page_load(driver):
        transactions = driver.find_element_by_partial_link_text('Transactions')
        transactions.click()
        time.sleep(10)
        # range_button 'Last 30 days'
        range_button = driver.find_element_by_xpath('//*[@id="Snb2Root"]/div/div/div[2]/div/div/div[1]/div[1]/div[1]/div/div[1]/div/span[1]')
        range_button.click()
        time.sleep(3)
        # 'Custom dates'
        custom_dates = driver.find_element_by_xpath('//*[@id="Snb2Root"]/div/div/div[2]/div/div/div[1]/div[1]/div[1]/div/div[1]/div[2]/div[4]')
        custom_dates.click()
        time.sleep(3)
        # set from_date, tab to to_date, and set it, then submit with \r\n:
        from_date = driver.find_element_by_xpath('//*[@id="spending-and-budgeting-filter-start-date-picker"]')
        from_date.send_keys('\b\b\b\b\b\b\b\b\b\b\b\b{}\t\t\b\b\b\b\b\b\b\b\b\b\b\b{}\r\n'.format(start_date_range, end_date_range))
        time.sleep(5)
        # Grab results from table
        table = driver.find_element_by_xpath('//*[@id="Snb2Root"]/div/div/div[2]/div/div/div[1]/div[3]/div/table/tbody')
        expense_items = []
        for table_row in table.find_elements_by_xpath('./tr'):
            expense_item = {}
            columns = [column for column in table_row.find_elements_by_xpath('./td')]
            if len(columns) == 5:  # skip entries without 5 columns
                for col_name, col_data in zip(['Date','Description','Account','Category','Amount'], columns):
                    expense_item[col_name] = col_data.text
                expense_item['Amount'] = float(sub(r'[^\d\-.]', '', expense_item['Amount']))
                expense_items.append(expense_item)
        totals = {}
        for item in expense_items:
            category = item['Category']
            if item['Description'] in['AMZN MKTP US', 'AMAZON.COM']:
                category = 'AMAZON'
            totals[category] = totals.get(category, 0.0) + item['Amount']
        print(json.dumps(totals, indent=3))
    driver.quit()


def load_amazon():
    days = CONFIG['AM_DAYS']
    driver = webdriver.Chrome('/usr/bin/chromedriver')
    end_time = time.time()
    start_time = end_time - (days * 24 * 60 * 60) # 30 days
    start_date_range = date.fromtimestamp(start_time).strftime('%-m/%d/%Y')
    start_month, start_day, start_year = start_date_range.split('/')
    end_date_range = date.fromtimestamp(end_time).strftime('%-m/%d/%Y')
    end_month, end_day, end_year = end_date_range.split('/')

    with wait_for_page_load(driver):
        driver.get(CONFIG['AM_URL'])
        sign_in_securely_button = driver.find_element_by_id('a-autoid-0-announce')
        sign_in_securely_button.click()
        time.sleep(1)
    with wait_for_page_load(driver):
        email_input = driver.find_element_by_id('ap_email')
        email_input.send_keys(CONFIG['AM_USERNAME'])
        continue_button = driver.find_element_by_id('continue')
        continue_button.click()
        time.sleep(1)
    with wait_for_page_load(driver):
        password_input = driver.find_element_by_id('ap_password')
        password_input.send_keys(CONFIG['AM_PWD'])
        sign_in_button = driver.find_element_by_id('signInSubmit')
        sign_in_button.click()
        time.sleep(1)
    with wait_for_page_load(driver):
        account_list_link = driver.find_element_by_id('nav-link-accountList')
        account_list_link.click()
        time.sleep(1)
    with wait_for_page_load(driver):
        download_order_reports_link = driver.find_element_by_link_text('Download order reports')
        download_order_reports_link.click()
        time.sleep(1)
    with wait_for_page_load(driver):
        report_month_start = Select(driver.find_element_by_id('report-month-start'))
        report_month_start.select_by_value('{}'.format(start_month))
        report_day_start = Select(driver.find_element_by_id('report-day-start'))
        report_day_start.select_by_value('{}'.format(start_day))  #'1' to '30' or whatever
        report_year_start = Select(driver.find_element_by_id('report-year-start'))
        report_year_start.select_by_value('{}'.format(start_year))  #'2020'  or whatever
        report_month_end = Select(driver.find_element_by_id('report-month-end'))
        report_month_end.select_by_value('{}'.format(end_month))  #'1' to '12'
        report_day_end = Select(driver.find_element_by_id('report-day-end'))
        report_day_end.select_by_value('{}'.format(end_day))  #'1' to '30' or whatever
        report_year_end = Select(driver.find_element_by_id('report-year-end'))
        report_year_end.select_by_value('{}'.format(end_year))  #'2020'  or whatever

        # remove older report(s)
        downloads_dir = os.path.expanduser('~/Downloads')
        files = [file for file in os.listdir(downloads_dir)]
        files = [file for file in files if file.endswith('.csv') and '_to_' in file]
        [os.remove(os.path.join(downloads_dir, file)) for file in files]
        # generate new report
        report_confirm_button = driver.find_element_by_id('report-confirm')
        report_confirm_button.click()
        time.sleep(60)
    driver.quit()


# main starts here:
def main():
    load_config()
    load_emoney()
    time.sleep(5)
    #load_amazon()

main()    
    
