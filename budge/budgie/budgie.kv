# -*-Python-*-
#:import sc budgie.sc
#:import GraphPanel budgie.GraphPanel
#:import BLabel budgie.BLabel
#:import platform kivy.utils.platform
#:set appbar_background_color (.95,.95,.93,1)
#:set even_row (.75,.73,.75,1)
#:set odd_row (.87,.9,.9,1)
#:set over_budget (.75,0,0,1)
#:set black (0,0,0,1)
#:set transparent (0,0,0,0)
#:set white (1,1,1,1)
#:set column_width 100
#:set category_width 200
#:set span_width 60

#
# common superclass for all labels, buttons
#
<BLabel@Label>:  # budgie label
    on_parent: root.title = self
    text_size: self.size
    markup: True
    shorten: True
    halign: 'center'
    valign: 'middle'
    color: black

<BButton@Button>:  # budgie button
    background_normal: ''
    background_down: ''
    background_color: transparent
    color: black

<BDButton@BButton>: # budgie dialog button
    font_size: sp(20)
    background_normal: ''
    offset: 2
    canvas.before:
        Color:
            rgba: .0,.0,.0,.5
        RoundedRectangle:
            pos: self.x + self.offset, self.y - self.offset
            size: self.size
        Color:
            rgba: appbar_background_color
        RoundedRectangle:
            pos: self.pos
            size: self.size

#
# generalized dialog
#
<-BDialog@ModalView>:
    offset: sc(3)
    size_hint: (.85,.85)
    overlay_color: 0,0,0,.5
    message: ''
    widgets: []
    buttons: []
    on_message: content.add_widget(BLabel(font_size=sp(18), halign='center', shorten=False, text=self.message), index=len(content.children)-1)
    on_widgets: for widget in self.widgets: dialog_widgets.add_widget(widget)
    on_buttons: for button in self.buttons: dialog_buttons.add_widget(button)
    canvas.before:
        Color:
            rgba: root.overlay_color[:3] + [root.overlay_color[-1] * self._anim_alpha]
        Rectangle:
            size: self._window.size if self._window else (0, 0)
        Color:
            rgba: .0,.0,.0,.5
        RoundedRectangle:
            pos: self.x + self.offset, self.y - self.offset
            size: self.size
        Color:
            rgba: white
        RoundedRectangle:
            pos: self.pos
            size: self.size

    BoxLayout:
        id: content
        orientation: 'vertical'
        padding: sc(10,10,10,10)
        spacing: sc(10)
        BoxLayout:
            id: dialog_widgets
            orientation: 'vertical'
            size_hint_y: None
            height: sc(0)
            spacing: sc(5)
            on_children: self.height = sum([child.height for child in self.children]) + sc(20) * len(self.children)
        # Widget:
        BoxLayout:
            id: dialog_buttons
            size_hint_y: None
            height: sc(50) if self.children else sc(0)
            orientation: 'horizontal'
            spacing: sc(20)
            
#
# AppBar layout
#
    
<AppBar@BoxLayout>:
    size_hint_y: None
    height: sc(50)
    orientation: 'horizontal'
    padding: sc(0,0,0,0)
    dismiss: None # Called when back button pressed, if defined.
    canvas:
        Color:
            rgb: appbar_background_color
        Rectangle:
            size: self.size
            pos: self.pos
    BButton:
        size_hint: None, None
        size: sc(50,50)
        background_color: appbar_background_color
        background_normal: '' if not root.dismiss else 'back_android.png' if platform=='android' else 'back.png'
        on_press: root.dismiss() if root.dismiss else None
    Widget:
        size_hint_x: None
        width: sc(50)
    BLabel:
        on_parent: root.title = self
        font_size: sp(18)
    BButton:
        size_hint: None, None
        size: sc(50,50)
        background_color: appbar_background_color
        background_normal: '' if not app.dirty else 'cloud_android.png' if platform=='android' else 'cloud.png'
        on_press: app.write_exceptions() if app.dirty else None
    BButton:
        size_hint: None, None
        size: sc(50,50)
        background_color: appbar_background_color
        background_normal: 'menu_android.png' if platform=='android' else 'menu.png'
        on_press: app.menu(self)

#
# Graph panel
#
<GraphPanel@ModalView>:
    BoxLayout:
        orientation: 'vertical'
        AppBar:
            id: bar
            dismiss: lambda *args: root.dismiss()
        ScrollView:
            id: scroller
            canvas.before:
                Color:
                    rgb: white
                Rectangle:
                    size: self.size
                    pos: self.pos
            do_scroll_x: True
            bar_width: sc(20)
            scroll_type: ['bars', 'content']
            RelativeLayout:
                size_hint_x: None
                width: 100
                id: surface

#
# Category Expenses panel
#

<CategoryExpenses@ModalView>:
    BoxLayout:
        orientation: 'vertical'
        AppBar:
            id: bar
            dismiss: lambda *args: root.dismiss()
        ScrollView:
            canvas.before:
                Color:
                    rgb: white
                Rectangle:
                    size: self.size
                    pos: self.pos

            do_scroll_x: True
            bar_width: sc(20)
            scroll_type: ['bars', 'content']
            BoxLayout:
                spacing: sc(20)
                orientation: 'vertical'
                size_hint_y: None
                on_children: self.height = sum([child.height+self.spacing for child in self.children])
                id: expense_list

<Expense@BoxLayout>:
    canvas.before:
        Color:
            rgba: even_row if self.parent and self.parent.children.index(self) % 2 else odd_row
        Rectangle:
            size: self.width, self.height + (sc(30) if self.parent and self.parent.children[-1] == self else sc(20))
            pos: self.x, self.y - sc(10)
    padding: sc(0,0,20,0)
    size_hint_y: None
    orientation: 'vertical'
    height: sc(100)

<ExpenseField@BoxLayout>:
    orientation: 'horizontal'
    canvas.before:
        Color:
            rgba: (1,1,1,.15) if self.parent and self.parent.children.index(self) % 2 else transparent
        Rectangle:
            size: self.size
            pos: self.pos
    BLabel:
        on_parent: root.key = self
        size_hint_x: None
        width: sc(200)
        halign: 'right'
    BLabel:
        id: value
        padding: sc(10,0)
        on_parent: root.value = self
        halign: 'left'
        shorten: True

<ColumnLabel@BLabel>:
    size_hint_x: None
    width: sc(column_width)
    font_size: sp(18)
    halign: 'right'
    shorten: False

<CategoryRowLabel@ColumnLabel>:
    color: over_budget if self.parent and self.parent.over_budget else black
  
<CategoryRow@ButtonBehavior+BoxLayout>:
    orientation: 'horizontal'
    size_hint_y: None
    height: sc(50)
    spacing: sc(10)
    padding: sc(20,0)
    details: None
    over_budget: False
    canvas.before:
        Color:
            rgb: even_row if app.indexes and self.details and app.indexes[self.details['category']] % 2  else odd_row
        Rectangle:
            size: self.size
            pos: self.pos
    Widget:
    CategoryRowLabel:
        id: category
        width: sc(category_width)
        halign: 'right'
    CategoryRowLabel:
        id: available
    CategoryRowLabel:
        id: total
    CategoryRowLabel:
        id: limit
    CategoryRowLabel:
        width: sc(span_width)
        id: span
    Widget:

#
# Category Chooser Panel
#

<CategoryChooser@ModalView>:
    BoxLayout:
        orientation: 'vertical'
        AppBar:
            id: bar
            dismiss: lambda *args: root.dismiss()
        ScrollView:
            canvas.before:
                Color:
                    rgb: white
                Rectangle:
                    size: self.size
                    pos: self.pos

            do_scroll_x: True
            bar_width: sc(20)
            scroll_type: ['bars', 'content']
            BoxLayout:
                orientation: 'vertical'
                size_hint_y: None
                on_children: self.height = sum([child.height+self.spacing for child in self.children])
                id: category_list


<CategoryChooserRow@ButtonBehavior+BLabel>:
    size_hint_y: None
    height: sc(40)
    color: black
    canvas.before:
        Color:
            rgba: even_row if self.parent and self.parent.children.index(self) % 2 else odd_row
        Rectangle:
            size: self.size
            pos: self.pos

#
# Main Panel
#

<Legend@BoxLayout>
    id: legend
    orientation: 'horizontal'
    size_hint_y: None
    height:sc(50)
    spacing: sc(10)
    padding: sc(20,0,20,0)
    canvas.before:
        Color:
            rgb: white
        Rectangle:
            size: self.size
            pos: self.pos
    Widget:
    ColumnLabel:
        width: sc(category_width)
        halign: 'right'
        text: 'Category'
    ColumnLabel:
        text: 'Available'
    ColumnLabel:
        text: 'Total'
    ColumnLabel:
        text: 'Limit'
    ColumnLabel:
        text: 'Span'
        width: sc(span_width)
    Widget:


BoxLayout:
    on_parent: app.root = self
    on_parent: self.width = 0
    orientation: 'vertical'
    on_size: content.width = max(self.width , legend.minimum_width)
    canvas.before:
        Color:
            rgba: white
        Rectangle:
            size: self.size
            pos: self.pos
    AppBar:
        id: bar
    ScrollView:
        do_scroll_x: True
        do_scroll_y: False
        BoxLayout: # provides horizontal scrolling from header
            id: content
            orientation: 'vertical'
            size_hint_x: None
            width: 
            Legend:
                id: legend
            RecycleView:
                on_parent: app.layout = self
                viewclass: 'CategoryRow'
                canvas.before:
                    Color:
                        rgb: white
                    Rectangle:
                        size: self.size
                        pos: self.pos
                RecycleBoxLayout:
                    default_size: None, sc(50)
                    default_size_hint: 1, None
                    size_hint_y: None
                    height: self.minimum_height
                    orientation: 'vertical'
            Legend:



